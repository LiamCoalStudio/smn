# Simon Language v0.4.1
#
# "Something about semicolon."
#   - Simon (Cat Edition), 2021

# Language Element
#
# Simon compiles to other languages, and this line tells
# the compiler which one to compile for.
/language: cpp/

# Modules
#
# Various modules are defined in `simondevcxx.h`, allowing
# you to include features in your program. You can even
# make your own:
# --: SMN :------------------------------------------------
#  uses test;
#  end uses;
#  /cpp/
#  #include "header_that_defines_test.h"
#  /#
# ---------------------------------------------------------
# The way Simon achieves this is by defining MODULE_<name>
#
# Note: In the #define MODULE_<name>, because `.` cannot be
# put in #define, they are replaced with `$`

# Include IO and simon.
uses simon;
uses simon.io;
uses simon.io.fs;

# Includes simondev
end uses;

include string;

declare void, test;

# Main Function
#
# Just the C++ Main Function. Argument Count is stored in
# argc, and the actual Arguments are in argv.
main;
    # Prints the executable name to the console
    println argv[0];

    # Creates a new variable...
    newvar int, cat, 7;
    # ...and sets it.
    setvar cat, 8;

    # Creates a new pointer... [C/C++]
    newptr short, jimmy;
    setptr jimmy, cat;

    # Call a declared function
    test;

    # Some info about SMN is available at runtime
    println smn_info::simon_version;

    # Open an output file
    newvar ofile, out, open_out("test.txt");
    write out, "test!";
    out.close;

    # Open an input file
    newvar ifile, in, open_in("test.txt");
    newvar str, test, read<str>(in);
    println test;
    in.close;

    # Switch statements
    switch 5;
    case 3;
        println "3!";
        end case;
    case 5;
        println "5!";
        end case;
    end switch;

    for i, 2, 7;
        println std::to_string(i);
    end for;

    while false;
        println "Wrong!";
        return 1;
    end while;

    postwhile;
        println "One time println!";
    end postwhile, false;

    # Return a value of 0
    return 0;

# End the function
end func;

func void, test;
    println "This is coming from the test function!";
end func;

class Test;
    visibility public;
    func void, print;
        println "Test";
    end func;
end class;

interface Cat;
    func void, meow;
end interface;

struct Simon;
    newvar int, attacks;
end struct;

enum Jimmy, CAT, MEOW;
